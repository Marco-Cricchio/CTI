# .github/workflows/ci.yml

name: CyberForge Sentinel - Full Stack CI

# Trigger: Esegui questo workflow ad ogni push o pull request sul branch 'main'
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
    # Esegui se ci sono cambiamenti nel backend, frontend, o nel workflow CI
    paths:
      - 'server/**'
      - 'client/**'
      - '.github/workflows/**'

# Configurazione concurrency per evitare esecuzioni multiple sulla stessa PR
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Nome del job
  test-backend:
    # Specifica il sistema operativo su cui eseguire il job
    runs-on: ubuntu-latest

    # Strategia di timeout per evitare job che si bloccano
    timeout-minutes: 15

    # Definisci i "servizi" container che devono essere disponibili per il job.
    # In questo caso, abbiamo bisogno di un database PostgreSQL.
    services:
      postgres:
        # Usa un'immagine Docker ufficiale di PostgreSQL (versione ottimizzata Alpine)
        image: postgres:15-alpine
        # Imposta le variabili d'ambiente per il database.
        # Devono corrispondere ESATTAMENTE a quelle nel file .env.test
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: cyberforge_test
          # Ottimizzazioni per performance nei test
          POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
        # Opzioni per il container. La healthcheck assicura che il job
        # attenda che il database sia pronto prima di procedere.
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 10
          --health-start-period 20s
        # Mappa la porta del container alla porta dell'host runner
        ports:
          - 5432:5432

    # I passaggi (step) che compongono il job
    steps:
      # 1. Clona il repository nel runner
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          # Ottimizzazione: shallow clone per performance
          fetch-depth: 1

      # 2. Imposta l'ambiente Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20' # LTS stable version per massima compatibilit√†
          cache: 'npm'
          cache-dependency-path: server/package-lock.json

      # 3. Verifica connessione database (step diagnostico)
      - name: Verify PostgreSQL connection
        run: |
          until pg_isready -h localhost -p 5432 -U test_user; do
            echo "Waiting for PostgreSQL to be ready..."
            sleep 2
          done
          echo "PostgreSQL is ready!"
        env:
          PGPASSWORD: test_password

      # 4. Installa le dipendenze del backend
      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit
        working-directory: ./server
        env:
          # Ottimizzazione: disabilita scripts post-install non necessari
          HUSKY_SKIP_INSTALL: 1

      # 5. Verifica TypeScript compilation
      - name: TypeScript check
        run: npm run typecheck
        working-directory: ./server

      # 6. Verifica code linting (allow warnings)
      - name: Lint check
        run: npm run lint || true
        working-directory: ./server

      # 7. Esegui la suite di test E2E
      - name: Run E2E tests
        run: npm run test:e2e
        working-directory: ./server
        # Imposta le variabili d'ambiente per il test.
        # Queste istruiscono l'applicazione a connettersi al servizio 'postgres'
        # che abbiamo definito sopra.
        env:
          # Database configuration (matching .env.test)
          DB_HOST: localhost
          DB_PORT: 5432
          DB_USERNAME: test_user
          DB_PASSWORD: test_password
          DB_NAME: cyberforge_test
          # JWT configuration
          JWT_SECRET: aVerySecureSecretKeyForTestingPurposeOnly123!
          # Node.js environment
          NODE_ENV: test
          # CI specific optimizations
          CI: true

      # 8. Upload test results (optional - for debugging)
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: test-results
          path: |
            server/coverage/
            server/test-results.xml
          retention-days: 7

  # Job per test E2E del frontend con Cypress
  test-frontend:
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      # 1. Clona il repository nel runner
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      # 2. Imposta l'ambiente Node.js per il frontend
      - name: Set up Node.js for Frontend
        uses: actions/setup-node@v4
        with:
          node-version: '20' # LTS stable version per massima compatibilit√†
          cache: 'npm'
          cache-dependency-path: client/package-lock.json

      # 3. L'action ufficiale di Cypress che gestisce tutto il ciclo E2E:
      # - Installa le dipendenze (npm ci)
      # - Avvia il server di sviluppo (npm start)
      # - Attende che il server sia pronto
      # - Esegue i test (cypress run)
      # - Carica screenshot e video in caso di fallimento
      - name: Run Cypress E2E tests
        uses: cypress-io/github-action@v6
        with:
          # Specifica la directory del progetto frontend
          working-directory: client
          # Comando per avviare il server di sviluppo React
          start: npm start
          # URL da attendere prima di eseguire i test
          wait-on: 'http://localhost:3000'
          # Timeout per wait-on (5 minuti)
          wait-on-timeout: 300
          # Browser da utilizzare per i test (Chrome √® ottimo per la CI)
          browser: chrome
          # Ottimizzazioni per ambiente CI
          record: false
          config: video=false
        env:
          # Ottimizzazioni per CI
          CI: true
          # Disabilita colori per log pi√π puliti
          NO_COLOR: 1

      # 4. Upload dei risultati in caso di fallimento
      - name: Upload Cypress screenshots
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: cypress-screenshots
          path: client/cypress/screenshots
          retention-days: 7

      - name: Upload Cypress videos
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: cypress-videos
          path: client/cypress/videos
          retention-days: 7

  # Job summary per PR comments (opzionale ma utile)
  test-summary:
    needs: [test-backend, test-frontend]
    runs-on: ubuntu-latest
    if: always() && github.event_name == 'pull_request'
    
    steps:
      - name: Full Stack Test Summary
        run: |
          backend_result="${{ needs.test-backend.result }}"
          frontend_result="${{ needs.test-frontend.result }}"
          
          echo "## üß™ CyberForge Sentinel - Test Results Summary"
          echo ""
          
          # Backend test results
          if [ "$backend_result" == "success" ]; then
            echo "‚úÖ **Backend Tests:** All API E2E tests passed successfully!"
          elif [ "$backend_result" == "failure" ]; then
            echo "‚ùå **Backend Tests:** API E2E tests failed."
          elif [ "$backend_result" == "skipped" ]; then
            echo "‚è≠Ô∏è **Backend Tests:** Skipped (no backend changes detected)."
          else
            echo "‚ö†Ô∏è **Backend Tests:** $backend_result"
          fi
          
          # Frontend test results  
          if [ "$frontend_result" == "success" ]; then
            echo "‚úÖ **Frontend Tests:** All Cypress E2E tests passed successfully!"
          elif [ "$frontend_result" == "failure" ]; then
            echo "‚ùå **Frontend Tests:** Cypress E2E tests failed."
          elif [ "$frontend_result" == "skipped" ]; then
            echo "‚è≠Ô∏è **Frontend Tests:** Skipped (no frontend changes detected)."
          else
            echo "‚ö†Ô∏è **Frontend Tests:** $frontend_result"
          fi
          
          echo ""
          
          # Overall status
          if [ "$backend_result" == "success" ] && [ "$frontend_result" == "success" ]; then
            echo "üéâ **Overall Status:** All tests passed! Ready for deployment."
            exit 0
          elif [ "$backend_result" == "skipped" ] && [ "$frontend_result" == "success" ]; then
            echo "‚úÖ **Overall Status:** Frontend tests passed, backend skipped."
            exit 0
          elif [ "$backend_result" == "success" ] && [ "$frontend_result" == "skipped" ]; then
            echo "‚úÖ **Overall Status:** Backend tests passed, frontend skipped."
            exit 0
          elif [ "$backend_result" == "skipped" ] && [ "$frontend_result" == "skipped" ]; then
            echo "‚è≠Ô∏è **Overall Status:** No changes requiring tests detected."
            exit 0
          else
            echo "‚ùå **Overall Status:** Some tests failed. Please check the results and fix any issues."
            exit 1
          fi